Exercise 1 (and Solution)
Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.

Extras:

Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. (Hint: order of operations exists in Python)
Print out that many copies of the previous message on separate lines. (Hint: the string "\n is the same as pressing the ENTER button)


name = input("What's your name? ")
age = int(input("How old are you? "))

centenarian_year = 2019 - age + 100

if age > 100:
    print ("You already turned 100 in ", centenarian_year)

elif age < 3:
    print("You're just a baby! You don't need to worry about that!")

else:

    print (name, "will turn one hundred in", centenarian_year)

    reprint = int(input("How many more times would you like to print that out? "))

    for n in range(reprint):
        print (name, "will turn one hundred in", centenarian_year)





Exercise 2 (and Solution)
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user. Hint: how does an even / odd number react differently when divided by 2?

Extras:

If the number is a multiple of 4, print out a different message.
Ask the user for two numbers: one number to check (call it num) and one number to divide by (check). If check divides evenly into num, tell that to the user. If not, print a different appropriate message.


number = int(input("Enter a number to see if it's odd or even: "))

if number % 2 == 0 and number % 4 != 0:
    print (number, "is an even number.")
elif number % 2 == 0 and number % 4 == 0:
    print(number, "is an even number which is divisible by 4.")
else:
    print (number, "is an odd number.")


#Extra 2:


num = int(input("Enter a number to divide: "))
check = int(input("Enter a number to divide by: "))

if num % check == 0:
    print (check, "divides evenly into", num)
else:
    print (num, "is not divisible by", check)




Exercise 3 (and Solution)
Take a list, say for example this one:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

Extras:

Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list.
Write this in one line of Python.
Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.


def lessthanten(lst):
    new_list = []
    for num in lst:
        if num <5:
            new_list.append(num)
    print (new_list)

#Extra 2:

def lessthanten(lst):
    print ([num for num in lst if num <5])

#Extra 3:

topnum = int(input("Enter a number "))

def lessthanten(lst):
    new_list = []
    for num in lst:
        if num <topnum:
            new_list.append(num)
    print (new_list)




Exercise 4 (and Solution)
Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a divisor is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)


user_num = int(input("Enter your number to see its divisors: "))

for num in range(2, user_num):
    if user_num % num == 0:
        print (num)





Exercise 5 (and Solution)
Take two lists, say for example these two:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.

Extras:

Randomly generate two lists to test this
Write this in one line of Python (don’t worry if you can’t figure this out at this point - we’ll get to it soon)


def twolist(a,b):
    new_list = []
    for num in a:
        if num in b:
            new_list.append(num)
    print (new_list)


#Extra 1:

import random

random_list_1 = random.sample(range(100), 25)
random_list_2 = random.sample(range(100), 25)
new_list = []

for num in random_list_1:
    if num in random_list_2:
        new_list.append(num)
print (new_list)


#Extra 2:

def twolist(a,b):
    print (set(a)&set(b))




Exercise 6 (and Solution)
Ask the user for a string and print out whether this string is a palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)


check_string = input("Input a string to see if it's a palindrome: ")

if check_string == check_string[::-1]:
    print (check_string, "is a palindrome.")
else:
    print (check_string, "is not a palindrome.")





Exercise 7 (and Solution)
Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.

def listcomp(lst):
    print ([0+num for num in lst if num % 2 ==0])



Exercise 8 (and Solution)
Make a two-player Rock-Paper-Scissors game. (Hint: Ask for player plays (using input), compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game)


p1 = int(input("Player 1: Enter 1 for rock, 2 for paper, 3 for scissors: "))
p2 = int(input("Player 2: Enter 1 for rock, 2 for paper, 3 for scissors: "))

if p1 == p2:
    print ("Tied! Go again.")
elif p1==1 and p2==2 or p1==2 and p2==3 or p1==3 and p2==1:
    print ("Player 2 wins!")
elif p1==1 and p2==3 or p1==2 and p2==1 or p1==3 and p2==2:
    print ("Player 1 wins!")





Exercise 9 (and Solution)
Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. (Hint: remember to use the user input lessons from the very first exercise)

Extras:

Keep the game going until the user types “exit”
Keep track of how many guesses the user has taken, and when the game ends, print this out.



import random

user_num = int(input("Enter your number: "))
rando_num = random.randint(1,10)

if rando_num == user_num:
    print ("You win!")
elif rando_num > user_num:
    print ("Too low!")
else:
    print ("Too high!")


#Extra 1 and 2:


import random

rando_num = random.randint(1,10)
user_input = 0
count = 0

while user_input != rando_num and user_input != "exit":
    user_input = input("Enter a number to guess or type exit. ")

    if user_input == "exit":
        break
    
    user_input = int(user_input)
    count += 1

    
    if rando_num == user_input:
        print ("You win! It took", count, "tries!")
    elif rando_num > user_input:
        print ("Too low!")
    else:
        print ("Too high!")



Exercise 10 (and Solution)
This week’s exercise is going to be revisiting an old exercise (see Exercise 5), except require the solution in a different way.

Take two lists, say for example these two:

	a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
	b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this in one line of Python using at least one list comprehension. (Hint: Remember list comprehensions from Exercise 7).

The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using sets that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the set command in Python 3.3, or try to implement this on your own and use at least one list comprehension in the solution.

Extra:

Randomly generate two lists to test this


import random

random_list_1 = random.sample(range(100), 25)
random_list_2 = random.sample(range(100), 25)
new_list = [num for num in random_list_1 if num in random_list_2]

print (new_list)




Exercise 11 (and Solution)
Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to Exercise 4 to help you. Take this opportunity to practice using functions, described below.


def get_num(prompt):
    return int(input(prompt))

def is_prime(num):
    if num == 1:
        prime == False
    elif num == 2:
        prime == True
    else:
        prime = True
        for check_num in range(2, int(num/2)+1):
            if num % check_num == 0:
                prime = False
                break
        return prime

def print_prime(num):
    prime = is_prime(num)
    if prime:
        descriptor = " "
    else:
        descriptor = "not "
    print(num," is ", descriptor, "prime.", sep = "", end ="\n\n")

while 1 == 1:
    print_prime(get_num("Enter a number to see if it's prime. Use ctrl-c to exit."))





Exercise 12 (and Solution)
Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.

def cut_list(user_list):
    return [user_list[0], user_list[len(user_list)-1]]





Exercise 13 (and Solution)
Write a program that asks the user how many Fibonnaci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.(Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, …)



fib_times = int(input("How long of a sequence do you want? "))

num1 = 0
num2 = 1
count = 0

while count < fib_times:
    print (num1, end=',')
    num_sum = num1 + num2
    num1 = num2
    num2 = num_sum
    count += 1




Exercise 14 (and Solution)
Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.

Extras:

Write two different functions to do this - one using a loop and constructing a list, and another using sets.
Go back and do Exercise 5 using sets, and write the solution for that in a different function.

user_list = input("Enter your list: ")

def remove_duplicates(user_list):
    new_list = []
    for num in user_list:
        if num not in new_list:
            new_list.append(num)
    print (new_list)
            
remove_duplicates(user_list)


#Or:

def remove_duplicates(user_list):
    user_list = list(set(user_list))
    user_list.sort()
    print (user_list)





Exercise 15 (and Solution)
Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order. For example, say I type the string:

  My name is Michele
Then I would see the string:

  Michele is name My
shown back to me.

def reverse_string():
    s = str(input("Enter a sentance: "))
    s = s.split()
    s = list(s)
    s = s[::-1]
    s = " ".join(s)
    print (s)


reverse_string()






Exercise 16 (and Solution)
Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password. Include your run-time code in a main method.

Extra:

Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.


import random
import string

pass_length = int(input("How long would you like your password to be? "))

rando_list = []

rando_list.append(''.join(random.SystemRandom().choice(string.ascii_letters \
        + string.digits + string.punctuation) for num in range(pass_length)))

rando_string = ''.join(rando_list)

print (rando_string)










Exercise 18 (and Solution)
Create a program that will play the “cows and bulls” game with the user. The game works like this:

Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place, they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout teh game and tell the user at the end.

Say the number generated by the computer is 1038. An example interaction could look like this:

  Welcome to the Cows and Bulls Game! 
  Enter a number: 
  >>> 1234
  2 cows, 0 bulls
  >>> 1256
  1 cow, 1 bull
  ...
Until the user guesses the number.





#THIS DOES NOT WORK YET


import random


def get_random_num():
    random_num = []
    for num in range (4):
        random_num.append(random.randrange(1,10,1))
    return (random_num)

def get_guess():
    user_num = list(input("Enter a four-digit number to guess. "))
    user_num = [int(num) for num in user_num]
    return (user_num)

def compare_nums(user_num, random_num):
    cows = 0
    bulls = 0
    for num in range(0, 4):
        if user_num[num] == random_num[num]:
            user_num.pop(num)
            cows +=1
        elif user_num[num] in random_num:
            user_num.pop(num)
            #comp_num = (set(random_num) & set(user_num))
            #print (comp_num)
            #print (len(comp_num))
            bulls += 1
            
    return cows, bulls
    

def main():
    
    user_num = get_guess()
    random_num = get_random_num()
    cows, bulls = compare_nums(user_num, random_num)

    while True:

        cows, bulls = compare_nums(user_num, random_num)

        print(user_num)
        print(random_num)

        if cows == 1 and bulls == 1:
            print ("You have 1 cow and 1 bull. ")
        elif cows == 1 and bulls != 1:
            print ("You have 1 cow and", bulls, "bulls. ")
        elif cows != 1 and bulls == 1:
            print ("You have", cows, "cows and 1 bull. ")
        elif cows == 4:
            print ("You are the king of the farm! You win!")
            break
        else:
            print ("You have", cows, "cows and", bulls, "bulls. ")

        user_num = get_guess()
    
    
if __name__ == '__main__':
    main()













Exercise 20 (and Solution)
Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to largest) and another number. The function decides whether or not the given number is inside the list and returns (then prints) an appropriate boolean.

Extras:

Use binary search.





ordered_list = [1,2,3,4,5,6,7,8,9,10]

my_num = 11

if my_num in ordered_list:
    print (True)
else:
    print (False)



#in a function:

def find_num(ordered_list, my_num):
    if my_num in ordered_list:
        return True
    else:
        return False

if __name__=="__main__":
    ordered_list = input("Enter a list")
    my_num = input("Enter a number to find")
    print (find_num(ordered_list, my_num))











Exercise 22 (and Solution)
Given a .txt file that has a list of a bunch of names, count how many of each name there are in the file, and print out the results to the screen. I have a .txt file for you, if you want to use it!

Extra:

Instead of using the .txt file from above (or instead of, if you want the challenge), take this .txt file, and count how many of each “category” of each image there are. This text file is actually a list of files corresponding to the SUN database scene recognition database, and lists the file directory hierarchy for the images. Once you take a look at the first line or two of the file, it will be clear which part represents the scene category. To do this, you’re going to have to remember a bit about string parsing in Python 3. I talked a little bit about it in this post.


all_text = open("nameslist.txt","r").read()
all_text_list = list(all_text.split())
text_set = list(set(all_text.split()))

name_a = text_set[0]
name_b = text_set[1]
name_c = text_set[2]

count_a = 0
count_b = 0
count_c = 0

while all_text_list != []:
    for n in all_text_list:
        if n == name_a:
            all_text_list.remove(n)
            count_a += 1
        elif n == name_b:
            all_text_list.remove(n)
            count_b += 1
        elif n == name_c:
            all_text_list.remove(n)
            count_c += 1
        else:
            break

        
print (name_a,":",count_a," ",name_b,":",count_b," ",name_c,":",count_c)












Exercise 23 (and Solution)
Given two .txt files that have lists of numbers in them, find the numbers that are overlapping. One .txt file has a list of all prime numbers under 1000, and the other .txt file has a list of happy numbers up to 1000.

(If you forgot, prime numbers are numbers that can’t be divided by any other number. And yes, happy numbers are a real thing in mathematics - you can look it up on Wikipedia. The explanation is easier with an example, which I will describe below.)




prime_nums = open("primenumbers.txt","r").read()
happy_nums = open("happynumbers.txt","r").read()
prime_list = list(prime_nums.split())
happy_list = list(happy_nums.split())
new_list = []

for num in prime_list:
    if num in happy_list:
        new_list.append(num)

print (new_list)



# using functions and list comprehension



def fileoverlap(filename):
    new_list = []
    with open(filename) as f:
        line = f.readline()
        while line:
            new_list.append(int(line))
            line = f.readline()
    return new_list

prime_list = fileoverlap('primenumbers.txt')
happy_list = fileoverlap('happynumbers.txt')

overlaplist = [num for num in prime_list if num in happy_list]

print(overlaplist)














Exercise 28 (and Solution)
Implement a function that takes as input three variables, and returns the largest of the three. Do this without using the Python max() function!

The goal of this exercise is to think about some internals that Python normally takes care of for us. All you need is some variables and if statements!



def find_max(num_one, num_two, num_three):
    high_num = ""
    if num_one > num_two and num_one > num_three:
        high_num = num_one
    elif num_two > num_one and num_two > num_three:
        high_num = num_two
    elif num_three > num_one and num_three > num_two:
        high_num = num_three
    return high_num


if __name__=="__main__":
    num_one = int(input("Enter the first number: "))
    num_two = int(input("Enter the second number: "))
    num_three = int(input("Enter the third number: "))
    high_num = find_max(num_one, num_two, num_three)
    print ("The highest number is:", high_num)









Exercise 30 (and Solution)
This exercise is Part 1 of 3 of the Hangman exercise series. The other exercises are: Part 2 and Part 3.

In this exercise, the task is to write a function that picks a random word from a list of words from the SOWPODS dictionary. Download this file and save it in the same directory as your Python code. This file is Peter Norvig’s compilation of the dictionary of words used in professional Scrabble tournaments. Each line in the file contains a single word.

Hint: use the Python random library for picking a random word.




import random

def get_random_word():
    all_text = open("sowpods.txt","r").read()
    text_list = list(all_text.split())
    while True:
        user_command = (int(input("Enter 1 for a random word or 2 to quit. ")))
        if user_command == 1:
            print (random.choice(text_list))
        elif user_command == 2:
            return False


if __name__ == "__main__":
    get_random_word()













Exercise 31 (and Solution)
This exercise is Part 2 of 3 of the Hangman exercise series. The other exercises are: Part 1 and Part 3.

Let’s continue building Hangman. In the game of Hangman, a clue word is given by the program that the player has to guess, letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual game, the player can only guess 6 letters incorrectly before losing).

Let’s say the word the player has to guess is “EVAPORATE”. For this exercise, write the logic that asks a player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the player guess an infinite number of times until they get the entire word. As a bonus, keep track of the letters the player guessed and display a different message if the player tries to guess that letter again. Remember to stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise.


    




import random

def play_hangman():
    all_text = open("sowpods.txt","r").read()
    text_list = list(all_text.split())
    #random_word = random.choice(text_list)
    trash_word= "EVAPORATE"
    letter_count = len(trash_word)
    trash_word = list(trash_word)
    display_word = list("_" * letter_count)
    guessed_list = []
    letter = input("Guess a letter: ")
    letter = letter.upper()

    while True:
        if letter in guessed_list:
            letter = ''
            print("You fool! That letter has already been guessed!")
        if letter in trash_word:
            index = trash_word.index(letter)
            display_word[index] = letter
            trash_word[index] = '_'
        else:
            new_display_word = (''.join(e if (i+1)%1 else e+" " for (i,e) in enumerate(list(display_word))))
            print (new_display_word)
            if letter is not '':
                guessed_list.append(letter.upper())
            letter = input("Guess a letter: ")
            letter = letter.upper()


        if '_' not in display_word:
            new_display_word = (''.join(e if (i+1)%1 else e+" " for (i,e) in enumerate(list(display_word))))
            print (new_display_word)
            print ("Against all odds you have conquered the known universe!!!")
            break
                
        


if __name__ == "__main__":
    
    play_hangman()




#now with random word functionality:




import random

def play_hangman():
    all_text = open("sowpods.txt","r").read()
    text_list = list(all_text.split())
    random_word = random.choice(text_list)
    trash_word= "EVAPORATE"
    letter_count = len(random_word)
    random_word = list(random_word)
    display_word = list("_" * letter_count)
    guessed_list = []
    letter = input("Guess a letter: ")
    letter = letter.upper()
    count = 0

    while True:
        if letter in guessed_list:
            count -= 1
            letter = ''
            print("You fool! That letter has already been guessed!")
        if letter in random_word:
            index = random_word.index(letter)
            display_word[index] = letter
            random_word[index] = '_'
        else:
            new_display_word = (''.join(e if (i+1)%1 else e+" " for (i,e) in enumerate(list(display_word))))
            count += 1
            print ("You have made", count, "guesses.")
            print (new_display_word)
            if letter is not '':
                guessed_list.append(letter.upper())
            letter = input("Guess a letter: ")
            letter = letter.upper()


        if '_' not in display_word:
            new_display_word = (''.join(e if (i+1)%1 else e+" " for (i,e) in enumerate(list(display_word))))
            print (new_display_word)
            print ("Against all odds you have conquered the known universe!!!")
            break
                
        


if __name__ == "__main__":
    
    play_hangman()











Exercise 33 (and Solution)
This exercise is Part 1 of 4 of the birthday data exercise series. The other exercises are: Part 2, Part 3, and Part 4.

For this exercise, we will keep track of when our friend’s birthdays are, and be able to find that information based on their name. Create a dictionary (in your file) of names and birthdays. When you run your program it should ask the user to enter a name, and return the birthday of that person back to them. The interaction should look something like this:

>>> Welcome to the birthday dictionary. We know the birthdays of:
Albert Einstein
Benjamin Franklin
Ada Lovelace
>>> Who's birthday do you want to look up?
Benjamin Franklin
>>> Benjamin Franklin's birthday is 01/17/1706.




def get_birthday():

    birthday_dictionary = {
        "Philip Selway": "5/23/1967",
        "Johnny Greenwood": "5/11/1971",
        "Colin Greenwood": "6/26/1969",
        "Ed O'Brien": "4/15/1968",
        "Thom Yorke": "10/7/1968"
        }

    band_member = input("Who's birthday do you want to look up? ")

    for name, birthday in birthday_dictionary.items():
        if name == band_member:
            print (name,"'s birthday is:", birthday)

if __name__ == "__main__":
    print ("\
            Welcome to the Radiohead birthday dictionary.\n\
            \n\
            We know the birthdays of:\n\
            \n\
            Philip Selway\n\
            Johnny Greenwood\n\
            Colin Greenwood\n\
            Ed O'Brien\n\
            Thom Yorke\n\
            ")
    
    get_birthday()



