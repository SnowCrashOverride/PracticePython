Exercise 1 (and Solution)
Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.

Extras:

Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. (Hint: order of operations exists in Python)
Print out that many copies of the previous message on separate lines. (Hint: the string "\n is the same as pressing the ENTER button)


name = input("What's your name? ")
age = int(input("How old are you? "))

centenarian_year = 2019 - age + 100

if age > 100:
    print ("You already turned 100 in ", centenarian_year)

elif age < 3:
    print("You're just a baby! You don't need to worry about that!")

else:

    print (name, "will turn one hundred in", centenarian_year)

    reprint = int(input("How many more times would you like to print that out? "))

    for n in range(reprint):
        print (name, "will turn one hundred in", centenarian_year)





Exercise 2 (and Solution)
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user. Hint: how does an even / odd number react differently when divided by 2?

Extras:

If the number is a multiple of 4, print out a different message.
Ask the user for two numbers: one number to check (call it num) and one number to divide by (check). If check divides evenly into num, tell that to the user. If not, print a different appropriate message.


number = int(input("Enter a number to see if it's odd or even: "))

if number % 2 == 0 and number % 4 != 0:
    print (number, "is an even number.")
elif number % 2 == 0 and number % 4 == 0:
    print(number, "is an even number which is divisible by 4.")
else:
    print (number, "is an odd number.")


#Extra 2:


num = int(input("Enter a number to divide: "))
check = int(input("Enter a number to divide by: "))

if num % check == 0:
    print (check, "divides evenly into", num)
else:
    print (num, "is not divisible by", check)




Exercise 3 (and Solution)
Take a list, say for example this one:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

Extras:

Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list.
Write this in one line of Python.
Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.


def lessthanten(lst):
    new_list = []
    for num in lst:
        if num <5:
            new_list.append(num)
    print (new_list)

#Extra 2:

def lessthanten(lst):
    print ([num for num in lst if num <5])

#Extra 3:

topnum = int(input("Enter a number "))

def lessthanten(lst):
    new_list = []
    for num in lst:
        if num <topnum:
            new_list.append(num)
    print (new_list)




Exercise 4 (and Solution)
Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a divisor is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)


user_num = int(input("Enter your number to see its divisors: "))

for num in range(2, user_num):
    if user_num % num == 0:
        print (num)





Exercise 5 (and Solution)
Take two lists, say for example these two:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.

Extras:

Randomly generate two lists to test this
Write this in one line of Python (don’t worry if you can’t figure this out at this point - we’ll get to it soon)


def twolist(a,b):
    new_list = []
    for num in a:
        if num in b:
            new_list.append(num)
    print (new_list)


#Extra 1:

import random

random_list_1 = random.sample(range(100), 25)
random_list_2 = random.sample(range(100), 25)
new_list = []

for num in random_list_1:
    if num in random_list_2:
        new_list.append(num)
print (new_list)


#Extra 2:

def twolist(a,b):
    print (set(a)&set(b))




Exercise 6 (and Solution)
Ask the user for a string and print out whether this string is a palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)


check_string = input("Input a string to see if it's a palindrome: ")

if check_string == check_string[::-1]:
    print (check_string, "is a palindrome.")
else:
    print (check_string, "is not a palindrome.")





Exercise 7 (and Solution)
Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.

def listcomp(lst):
    print ([0+num for num in lst if num % 2 ==0])



Exercise 8 (and Solution)
Make a two-player Rock-Paper-Scissors game. (Hint: Ask for player plays (using input), compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game)


p1 = int(input("Player 1: Enter 1 for rock, 2 for paper, 3 for scissors: "))
p2 = int(input("Player 2: Enter 1 for rock, 2 for paper, 3 for scissors: "))

if p1 == p2:
    print ("Tied! Go again.")
elif p1==1 and p2==2 or p1==2 and p2==3 or p1==3 and p2==1:
    print ("Player 2 wins!")
elif p1==1 and p2==3 or p1==2 and p2==1 or p1==3 and p2==2:
    print ("Player 1 wins!")





Exercise 9 (and Solution)
Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. (Hint: remember to use the user input lessons from the very first exercise)

Extras:

Keep the game going until the user types “exit”
Keep track of how many guesses the user has taken, and when the game ends, print this out.



import random

user_num = int(input("Enter your number: "))
rando_num = random.randint(1,10)

if rando_num == user_num:
    print ("You win!")
elif rando_num > user_num:
    print ("Too low!")
else:
    print ("Too high!")


#Extra 1 and 2:


import random

rando_num = random.randint(1,10)
user_input = 0
count = 0

while user_input != rando_num and user_input != "exit":
    user_input = input("Enter a number to guess or type exit. ")

    if user_input == "exit":
        break
    
    user_input = int(user_input)
    count += 1

    
    if rando_num == user_input:
        print ("You win! It took", count, "tries!")
    elif rando_num > user_input:
        print ("Too low!")
    else:
        print ("Too high!")



Exercise 10 (and Solution)
This week’s exercise is going to be revisiting an old exercise (see Exercise 5), except require the solution in a different way.

Take two lists, say for example these two:

	a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
	b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this in one line of Python using at least one list comprehension. (Hint: Remember list comprehensions from Exercise 7).

The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using sets that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the set command in Python 3.3, or try to implement this on your own and use at least one list comprehension in the solution.

Extra:

Randomly generate two lists to test this


import random

random_list_1 = random.sample(range(100), 25)
random_list_2 = random.sample(range(100), 25)
new_list = [num for num in random_list_1 if num in random_list_2]

print (new_list)




Exercise 11 (and Solution)
Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to Exercise 4 to help you. Take this opportunity to practice using functions, described below.


def get_num(prompt):
    return int(input(prompt))

def is_prime(num):
    if num == 1:
        prime == False
    elif num == 2:
        prime == True
    else:
        prime = True
        for check_num in range(2, int(num/2)+1):
            if num % check_num == 0:
                prime = False
                break
        return prime

def print_prime(num):
    prime = is_prime(num)
    if prime:
        descriptor = " "
    else:
        descriptor = "not "
    print(num," is ", descriptor, "prime.", sep = "", end ="\n\n")

while 1 == 1:
    print_prime(get_num("Enter a number to see if it's prime. Use ctrl-c to exit."))





Exercise 12 (and Solution)
Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.

def cut_list(user_list):
    return [user_list[0], user_list[len(user_list)-1]]





Exercise 13 (and Solution)
Write a program that asks the user how many Fibonnaci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.(Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, …)



fib_times = int(input("How long of a sequence do you want? "))

num1 = 0
num2 = 1
count = 0

while count < fib_times:
    print (num1, end=',')
    num_sum = num1 + num2
    num1 = num2
    num2 = num_sum
    count += 1




Exercise 14 (and Solution)
Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.

Extras:

Write two different functions to do this - one using a loop and constructing a list, and another using sets.
Go back and do Exercise 5 using sets, and write the solution for that in a different function.

user_list = input("Enter your list: ")

def remove_duplicates(user_list):
    new_list = []
    for num in user_list:
        if num not in new_list:
            new_list.append(num)
    print (new_list)
            
remove_duplicates(user_list)


#Or:

def remove_duplicates(user_list):
    user_list = list(set(user_list))
    user_list.sort()
    print (user_list)

